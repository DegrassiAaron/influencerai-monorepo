generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum JobStatus {
  pending
  running
  succeeded
  failed
  completed
}

model Tenant {
  id          String       @id @default(cuid())
  name        String
  influencers Influencer[]
  datasets    Dataset[]
  users       User[]
  jobs        Job[]
  loraConfigs LoraConfig[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Influencer {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  persona   Json
  datasetId String?
  Tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}

model Dataset {
  id        String   @id @default(cuid())
  tenantId  String
  kind      String
  path      String
  meta      Json
  status    String   @default("pending")
  Tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
  @@index([tenantId, status])
  @@index([tenantId, kind])
  @@index([tenantId, createdAt])
}

model Job {
  id         String    @id @default(cuid())
  tenantId   String
  type       String
  status     JobStatus @default(pending)
  payload    Json
  result     Json?
  costTok    Int?
  startedAt  DateTime?
  finishedAt DateTime?
  assets     Asset[]
  Tenant     Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([status])
  @@index([type])
  @@index([tenantId])
}

model Asset {
  id        String   @id @default(cuid())
  jobId     String
  type      String
  url       String
  meta      Json
  Job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([jobId])
}

model User {
  id           String   @id @default(cuid())
  tenantId     String
  email        String   @unique
  passwordHash String
  role         String   @default("admin")
  Tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([tenantId])
}

model LoraConfig {
  id           String   @id @default(cuid())
  tenantId     String
  name         String
  description  String?
  modelName    String
  epochs       Int      @default(10)
  learningRate Float    @default(0.0001)
  batchSize    Int      @default(1)
  resolution   Int      @default(512)
  networkDim   Int      @default(32)
  networkAlpha Int      @default(16)
  outputPath   String?
  meta         Json     @default("{}")
  isDefault    Boolean  @default(false)
  Tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([tenantId, isDefault])
  @@index([tenantId, modelName])
  @@index([tenantId, createdAt])
}
