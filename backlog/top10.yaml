issues:
- title: 'INFRA-01: Inizializzare database con Prisma migrations'
  body: '### Contesto

    Non esistono migrazioni Prisma nel repository. Il database non può essere inizializzato
    correttamente e i servizi Docker dipendenti falliscono.


    ### DoD

    - [ ] Migrazione iniziale generata con `prisma migrate dev --name init`.

    - [ ] Tabelle create per Tenant, Influencer, Dataset, Job, Asset.

    - [ ] File di migrazione committati in `apps/api/prisma/migrations/`.

    - [ ] `docker compose up api-migrate` completa con successo.

    '
  labels:
  - area:infra
  - type:setup
  - priority:P0
  priority: P0
  impact: Critical
  estimate: S
  code: INFRA-01
- title: 'INFRA-02: Configurare MinIO bucket e credenziali'
  body: '### Contesto

    MinIO non è in esecuzione. Il bucket `assets` richiesto per storage di file generati
    non esiste, bloccando upload e asset management.


    ### DoD

    - [ ] MinIO avviato con `docker compose up -d minio`.

    - [ ] Bucket `assets` creato via console o CLI.

    - [ ] Credenziali S3 verificate in `.env`.

    - [ ] API può caricare/scaricare file da MinIO.

    '
  labels:
  - area:infra
  - type:setup
  - priority:P0
  priority: P0
  impact: Critical
  estimate: S
  code: INFRA-02
- title: 'INFRA-03: Configurare n8n workflows'
  body: '### Contesto

    n8n non è avviato. Workflow per orchestrazione content generation, LoRA training
    e autopost non sono definiti.


    ### DoD

    - [ ] n8n avviato su http://localhost:5678.

    - [ ] Workflow base creati (content-plan, lora-training, content-generation, autopost).

    - [ ] Workflow esportati come JSON in `apps/n8n/workflows/`.

    - [ ] Connessione tra n8n e API testata.

    '
  labels:
  - area:infra
  - type:setup
  - priority:P0
  priority: P0
  impact: High
  estimate: M
  code: INFRA-03
- title: 'API-01: Setup test database e migrazione'
  body: '### Contesto

    I test dell''API non hanno un database isolato. Eseguire test sul database di
    sviluppo è rischioso e può causare perdita di dati.


    ### DoD

    - [ ] Variabile `DATABASE_URL_TEST` aggiunta in `.env.example`.

    - [ ] `jest.e2e.config.js` configurato per usare DB test.

    - [ ] Setup file che resetta DB test prima/dopo test suite.

    - [ ] Script `test:e2e:db:reset` funzionante.


    ### Dipendenze

    - [INFRA-01] Inizializzare database con Prisma migrations

    '
  labels:
  - area:api
  - type:test
  - priority:P1
  priority: P1
  impact: High
  estimate: M
  depends_on:
  - INFRA-01
  code: API-01
- title: 'WORK-01: Sincronizzare stato job con l''API'
  body: '### Contesto

    Il worker logga i job ma non aggiorna il database. Serve un client verso l''API
    per cambiare status, memorizzare result e costi e gestire failure automatiche.


    ### DoD

    - [ ] Client REST o SDK per PATCH /jobs/:id con status/result.

    - [ ] Aggiornamento stato su start, success e failure.

    - [ ] Backoff configurabile (BullMQ) per retry.

    - [ ] Test end-to-end con Redis locale che verifica roundtrip.


    ### Dipendenze

    - [API-03] Esporre CRUD dei job e integrazione con BullMQ

    '
  labels:
  - area:worker
  - type:feat
  - priority:P1
  priority: P1
  impact: High
  estimate: M
  depends_on:
  - API-03
  code: WORK-01
- title: 'WEB-01: Implementare autenticazione e sessione'
  body: '### Contesto

    Il frontend Next.js è statico. Serve login, gestione token e protezione delle
    route usando le API che verranno introdotte.


    ### DoD

    - [ ] Pagina /login con form e chiamata a /auth/login.

    - [ ] Salvataggio token (httpOnly cookie o storage sicuro) e provider contesto.

    - [ ] Middleware per proteggere route e redirect.

    - [ ] Test component/integration con Playwright o React Testing Library.


    ### Dipendenze

    - [API-06] Autenticazione multi-tenant con JWT

    '
  labels:
  - area:web
  - type:feat
  - priority:P1
  priority: P1
  impact: High
  estimate: M
  depends_on:
  - API-06
  code: WEB-01
- title: 'API-02: Modellare schema Prisma per tenant, influencer, dataset e job'
  body: '### Contesto

    Lo schema Prisma è assente ma la README documenta entità come Tenant, Influencer,
    Dataset, Job e Asset. Va codificato lo schema completo con relazioni e campi obbligatori
    per supportare code di generazione e storage asset.


    ### DoD

    - [x] schema.prisma aggiornato con modelli Tenant, Influencer, Dataset, Job, Asset.

    - [x] Migrazione iniziale generata e applicata localmente (pnpm prisma migrate
    dev).

    - [x] Script prisma generate aggiunto agli script dell''app API.

    - [x] Documentata nella README API la procedura per applicare le migrazioni.


    ### Dipendenze

    - [INFRA-01] Inizializzare database con Prisma migrations

    '
  labels:
  - area:api
  - type:feat
  - priority:P1
  priority: P1
  impact: High
  estimate: L
  depends_on:
  - INFRA-01
  code: API-02
- title: 'API-03: Esporre CRUD dei job e integrazione con BullMQ'
  body: '### Contesto

    Il client SDK presuppone endpoint /jobs ma l''API non li implementa. Occorre creare
    controller, DTO e service che salvano i job in Postgres, li inseriscono in coda
    su BullMQ e restituiscono stato/risultato.


    ### DoD

    - [x] Endpoint POST /jobs con validazione Zod/DTO e enqueue in coda content-generation
    o lora-training.

    - [x] Endpoint GET /jobs con filtri base (status, type) e paginazione.

    - [x] Endpoint GET /jobs/:id che restituisce metadata, payload e result.

    - [x] Test e2e o integration che verifica roundtrip con Redis locale.


    ### Dipendenze

    - [API-02] Modellare schema Prisma per tenant, influencer, dataset e job

    '
  labels:
  - area:api
  - type:feat
  - priority:P1
  priority: P1
  impact: High
  estimate: L
  depends_on:
  - API-02
  code: API-03
- title: 'WEB-02: Dashboard operativo con stato code'
  body: '### Contesto

    Serve una vista unica che mostri job attivi, successi/fallimenti e stato dei servizi
    per dare feedback agli operatori.


    ### DoD

    - [ ] Pagina /dashboard con widget job queue (attivi, pending, failed).

    - [ ] Card health basata sui nuovi endpoint /healthz//readyz.

    - [ ] Grafico andamento ultimi job (es. area chart) con TanStack Query.

    - [ ] Stato reattivo (polling o websocket) documentato.


    ### Dipendenze

    - [API-03] Esporre CRUD dei job e integrazione con BullMQ

    - [API-07] Health & readiness con check Postgres/Redis/MinIO

    '
  labels:
  - area:web
  - type:feat
  - priority:P1
  priority: P1
  impact: High
  estimate: L
  depends_on:
  - API-03
  - API-07
  code: WEB-02
