issues:
- title: 'INFRA-01: Inizializzare database con Prisma migrations'
  body: '### Contesto

    Non esistono migrazioni Prisma nel repository. Il database non può essere inizializzato
    correttamente e i servizi Docker dipendenti falliscono.


    ### DoD

    - [ ] Migrazione iniziale generata con `prisma migrate dev --name init`.

    - [ ] Tabelle create per Tenant, Influencer, Dataset, Job, Asset.

    - [ ] File di migrazione committati in `apps/api/prisma/migrations/`.

    - [ ] `docker compose up api-migrate` completa con successo.

    '
  labels:
  - area:infra
  - type:setup
  - priority:P0
  priority: P0
  impact: Critical
  estimate: S
  code: INFRA-01
- title: 'INFRA-02: Configurare MinIO bucket e credenziali'
  body: '### Contesto

    MinIO non è in esecuzione. Il bucket `assets` richiesto per storage di file generati
    non esiste, bloccando upload e asset management.


    ### DoD

    - [ ] MinIO avviato con `docker compose up -d minio`.

    - [ ] Bucket `assets` creato via console o CLI.

    - [ ] Credenziali S3 verificate in `.env`.

    - [ ] API può caricare/scaricare file da MinIO.

    '
  labels:
  - area:infra
  - type:setup
  - priority:P0
  priority: P0
  impact: Critical
  estimate: S
  code: INFRA-02
- title: 'INFRA-03: Configurare n8n workflows'
  body: '### Contesto

    n8n non è avviato. Workflow per orchestrazione content generation, LoRA training
    e autopost non sono definiti.


    ### DoD

    - [ ] n8n avviato su http://localhost:5678.

    - [ ] Workflow base creati (content-plan, lora-training, content-generation, autopost).

    - [ ] Workflow esportati come JSON in `apps/n8n/workflows/`.

    - [ ] Connessione tra n8n e API testata.

    '
  labels:
  - area:infra
  - type:setup
  - priority:P0
  priority: P0
  impact: High
  estimate: M
  code: INFRA-03
- title: 'API-01: Setup test database e migrazione'
  body: '### Contesto

    I test dell''API non hanno un database isolato. Eseguire test sul database di
    sviluppo è rischioso e può causare perdita di dati.


    ### DoD

    - [ ] Variabile `DATABASE_URL_TEST` aggiunta in `.env.example`.

    - [ ] `jest.e2e.config.js` configurato per usare DB test.

    - [ ] Setup file che resetta DB test prima/dopo test suite.

    - [ ] Script `test:e2e:db:reset` funzionante.


    ### Dipendenze

    - [INFRA-01] Inizializzare database con Prisma migrations

    '
  labels:
  - area:api
  - type:test
  - priority:P1
  priority: P1
  impact: High
  estimate: M
  depends_on:
  - INFRA-01
  code: API-01
- title: 'API-02: Modellare schema Prisma per tenant, influencer, dataset e job'
  body: '### Contesto

    Lo schema Prisma è assente ma la README documenta entità come Tenant, Influencer,
    Dataset, Job e Asset. Va codificato lo schema completo con relazioni e campi obbligatori
    per supportare code di generazione e storage asset.


    ### DoD

    - [ ] schema.prisma aggiornato con modelli Tenant, Influencer, Dataset, Job, Asset.

    - [ ] Migrazione iniziale generata e applicata localmente (pnpm prisma migrate
    dev).

    - [ ] Script prisma generate aggiunto agli script dell''app API.

    - [ ] Documentata nella README API la procedura per applicare le migrazioni.


    ### Dipendenze

    - [INFRA-01] Inizializzare database con Prisma migrations

    '
  labels:
  - area:api
  - type:feat
  - priority:P1
  priority: P1
  impact: High
  estimate: L
  depends_on:
  - INFRA-01
  code: API-02
- title: 'API-03: Esporre CRUD dei job e integrazione con BullMQ'
  body: '### Contesto

    Il client SDK presuppone endpoint /jobs ma l''API non li implementa. Occorre creare
    controller, DTO e service che salvano i job in Postgres, li inseriscono in coda
    su BullMQ e restituiscono stato/risultato.


    ### DoD

    - [ ] Endpoint POST /jobs con validazione Zod/DTO e enqueue in coda content-generation
    o lora-training.

    - [ ] Endpoint GET /jobs con filtri base (status, type) e paginazione.

    - [ ] Endpoint GET /jobs/:id che restituisce metadata, payload e result.

    - [ ] Test e2e o integration che verifica roundtrip con Redis locale.


    ### Dipendenze

    - [API-02] Modellare schema Prisma per tenant, influencer, dataset e job

    '
  labels:
  - area:api
  - type:feat
  - priority:P1
  priority: P1
  impact: High
  estimate: L
  depends_on:
  - API-02
  code: API-03
- title: 'API-04: Endpoint Content Plan con integrazione OpenRouter'
  body: '### Contesto

    Il pacchetto @influencerai/prompts fornisce template ma l''API non ha endpoint
    per generare e salvare ContentPlan. Serve orchestrare la chiamata a OpenRouter,
    validare la risposta e persisterla.


    ### DoD

    - [ ] POST /content-plans che accetta persona/tema, invoca OpenRouter con prompt
    dedicato.

    - [ ] Persistenza del piano con timestamp e associazione a influencer/tenant.

    - [ ] Endpoint GET /content-plans/:id e /content-plans (lista filtrabile).

    - [ ] Test che stubba OpenRouter e verifica parsing + salvataggio.


    ### Dipendenze

    - [API-02] Modellare schema Prisma per tenant, influencer, dataset e job

    '
  labels:
  - area:api
  - type:feat
  - priority:P1
  priority: P1
  impact: High
  estimate: L
  depends_on:
  - API-02
  code: API-04
- title: 'API-05: Dataset ingestion e storage su MinIO'
  body: '### Contesto

    La piattaforma richiede upload e tracciamento dei dataset per il training LoRA
    ma manca qualsiasi endpoint. Serve integrare MinIO (S3 compatibile) e salvare
    metadati nel database.


    ### DoD

    - [ ] Service S3 basato su MinIO configurato via variabili S3_*.

    - [ ] Endpoint POST /datasets per creare record e ottenere URL di upload presignato.

    - [ ] Endpoint PATCH /datasets/:id/status per aggiornare stato (es. READY, PROCESSING).

    - [ ] Integrazione test con MinIO locale via docker compose.


    ### Dipendenze

    - [API-02] Modellare schema Prisma per tenant, influencer, dataset e job

    - [INFRA-02] Configurare MinIO bucket e credenziali

    '
  labels:
  - area:api
  - type:feat
  - priority:P1
  priority: P1
  impact: High
  estimate: L
  depends_on:
  - API-02
  - INFRA-02
  code: API-05
- title: 'API-06: Autenticazione multi-tenant con JWT'
  body: "### Contesto\nAl momento l'API è pubblica. Per rispettare il modello multi-tenant\
    \ descritto nella README servono login, gestione tenant e guard per proteggere\
    \ le route.\n\n### DoD\n- [ ] Endpoint /auth/login con email+password o token\
    \ magic e generazione JWT.\n- [ ] Middleware/guard che applica \tenantId alle\
    \ query Prisma.\n- [ ] Seed iniziale di un tenant admin per sviluppo.\n- [ ] Test\
    \ e2e che verifica accesso negato senza token.\n\n### Dipendenze\n- [API-02] Modellare\
    \ schema Prisma per tenant, influencer, dataset e job\n"
  labels:
  - area:api
  - type:feat
  - priority:P1
  priority: P1
  impact: High
  estimate: L
  depends_on:
  - API-02
  code: API-06
- title: 'API-07: Health & readiness con check Postgres/Redis/MinIO'
  body: '### Contesto

    L''endpoint /health restituisce solo uno status statico. Serve una versione che
    controlli lo stato delle dipendenze per supportare orchestrazione e monitoraggio.


    ### DoD

    - [ ] GET /healthz con checks individuali per DB, Redis e MinIO.

    - [ ] GET /readyz pensato per probe di Kubernetes/docker compose.

    - [ ] Output JSON con dettagli su latenza e stato.

    - [ ] Test che mocka disservizi e verifica risposta corretta.


    ### Dipendenze

    - [INFRA-01] Inizializzare database con Prisma migrations

    - [INFRA-02] Configurare MinIO bucket e credenziali

    '
  labels:
  - area:api
  - type:chore
  - priority:P2
  priority: P2
  impact: Medium
  estimate: M
  depends_on:
  - INFRA-01
  - INFRA-02
  code: API-07
- title: 'API-08: Validazione config env con Zod'
  body: '### Contesto

    Attualmente ConfigModule carica le variabili senza validarle. Occorre evitare
    errori a runtime introducendo uno schema di validazione con fallback sicuri.


    ### DoD

    - [ ] Schema di validazione (Zod) per tutte le variabili richieste nel README.

    - [ ] Fallback ragionati (es. porta default) documentati.

    - [ ] Failing fast se una variabile obbligatoria manca.

    - [ ] Test unitario che copre il caso di variabile assente.

    '
  labels:
  - area:api
  - type:chore
  - priority:P2
  priority: P2
  impact: Medium
  estimate: S
  code: API-08
- title: 'WORK-01: Sincronizzare stato job con l''API'
  body: '### Contesto

    Il worker logga i job ma non aggiorna il database. Serve un client verso l''API
    per cambiare status, memorizzare result e costi e gestire failure automatiche.


    ### DoD

    - [ ] Client REST o SDK per PATCH /jobs/:id con status/result.

    - [ ] Aggiornamento stato su start, success e failure.

    - [ ] Backoff configurabile (BullMQ) per retry.

    - [ ] Test end-to-end con Redis locale che verifica roundtrip.


    ### Dipendenze

    - [API-03] Esporre CRUD dei job e integrazione con BullMQ

    '
  labels:
  - area:worker
  - type:feat
  - priority:P1
  priority: P1
  impact: High
  estimate: M
  depends_on:
  - API-03
  code: WORK-01
- title: 'WORK-02: Implementare processor content-generation'
  body: '### Contesto

    La coda content-generation è un TODO. Serve orchestrare chiamate a OpenRouter,
    generare caption/script e creare job figlio per asset visivi.


    ### DoD

    - [ ] Implementato processor che richiama OpenRouter usando prompts.

    - [ ] Salvataggio output testuale su S3/Asset e collegamento al job.

    - [ ] Gestione errori con retry e logging strutturato.

    - [ ] Test unit/integration con mock OpenRouter.


    ### Dipendenze

    - [WORK-01] Sincronizzare stato job con l''API

    '
  labels:
  - area:worker
  - type:feat
  - priority:P1
  priority: P1
  impact: High
  estimate: L
  depends_on:
  - WORK-01
  code: WORK-02
- title: 'WORK-03: Aggiungere test per worker'
  body: '### Contesto

    Il package worker non ha configurazione test. Logica BullMQ non validata, job
    processor non testati.


    ### DoD

    - [ ] Vitest configurato per ambiente Node.js.

    - [ ] Test base per worker initialization e job processing.

    - [ ] Mock di BullMQ e ioredis per test unitari.

    - [ ] Script `test` funzionante in package.json.

    '
  labels:
  - area:worker
  - type:test
  - priority:P2
  priority: P2
  impact: Medium
  estimate: M
  code: WORK-03
- title: 'WORK-04: Orchestrare training LoRA'
  body: '### Contesto

    Serve un processor dedicato che lanci kohya_ss con i parametri definiti nello
    schema LoRA e monitori il progresso, aggiornando il job e gli asset prodotti.


    ### DoD

    - [ ] Script wrapper che lancia kohya_ss con dataset e config dal DB.

    - [ ] Streaming dei log e update progressivo del job.

    - [ ] Upload degli output .safetensors su MinIO.

    - [ ] Test manuale documentato (dry-run) e logging degli errori.


    ### Dipendenze

    - [WORK-01] Sincronizzare stato job con l''API

    - [API-05] Dataset ingestion e storage su MinIO

    '
  labels:
  - area:worker
  - type:feat
  - priority:P2
  priority: P2
  impact: High
  estimate: L
  depends_on:
  - WORK-01
  - API-05
  code: WORK-04
- title: 'WORK-05: Pipeline video con ComfyUI e FFmpeg'
  body: "### Contesto\nLa README descrive generazione video ma il worker non integra\
    \ ComfyUI né FFmpeg. Va creato un processor che interagisce con le API locali\
    \ di ComfyUI e normalizza i file video finali.\n\n### DoD\n- [ ] Job video-generation\
    \ che chiama ComfyUI REST e gestisce il polling dello stato.\n- [ ] Post-processing\
    \ FFmpeg (aspect ratio, audio leveling) configurabile.\n- [ ] Asset video caricati\
    \ su MinIO e registrati nel DB.\n- [ ] Test manuale con ComfyUI locale documentato.\n\
    \n### Dipendenze\n- [WORK-01] Sincronizzare stato job con l'API\n- [API-05] Dataset\
    \ ingestion e storage su MinIO\n"
  labels:
  - area:worker
  - type:feat
  - priority:P2
  priority: P2
  impact: High
  estimate: L
  depends_on:
  - WORK-01
  - API-05
  code: WORK-05
- title: 'WORK-06: Metriche, alert e Bull Board'
  body: '### Contesto

    Per gestire carichi di generazione servono metriche e visibilità. Va aggiunta
    una dashboard (Bull Board o simile), esportazione metriche Prometheus e alert
    via log o webhook.


    ### DoD

    - [ ] Setup Bull Board accessibile via autenticazione basic.

    - [ ] Metriche chiave (job in attesa, falliti, durata media) esportate.

    - [ ] Alert su failure consecutive inviati a webhook n8n o Slack.

    - [ ] Documentazione su come avviare la dashboard.

    '
  labels:
  - area:worker
  - type:chore
  - priority:P3
  priority: P3
  impact: Medium
  estimate: M
  code: WORK-06
- title: 'WEB-01: Implementare autenticazione e sessione'
  body: '### Contesto

    Il frontend Next.js è statico. Serve login, gestione token e protezione delle
    route usando le API che verranno introdotte.


    ### DoD

    - [ ] Pagina /login con form e chiamata a /auth/login.

    - [ ] Salvataggio token (httpOnly cookie o storage sicuro) e provider contesto.

    - [ ] Middleware per proteggere route e redirect.

    - [ ] Test component/integration con Playwright o React Testing Library.


    ### Dipendenze

    - [API-06] Autenticazione multi-tenant con JWT

    '
  labels:
  - area:web
  - type:feat
  - priority:P1
  priority: P1
  impact: High
  estimate: M
  depends_on:
  - API-06
  code: WEB-01
- title: 'WEB-02: Dashboard operativo con stato code'
  body: '### Contesto

    Serve una vista unica che mostri job attivi, successi/fallimenti e stato dei servizi
    per dare feedback agli operatori.


    ### DoD

    - [ ] Pagina /dashboard con widget job queue (attivi, pending, failed).

    - [ ] Card health basata sui nuovi endpoint /healthz//readyz.

    - [ ] Grafico andamento ultimi job (es. area chart) con TanStack Query.

    - [ ] Stato reattivo (polling o websocket) documentato.


    ### Dipendenze

    - [API-03] Esporre CRUD dei job e integrazione con BullMQ

    - [API-07] Health & readiness con check Postgres/Redis/MinIO

    '
  labels:
  - area:web
  - type:feat
  - priority:P1
  priority: P1
  impact: High
  estimate: L
  depends_on:
  - API-03
  - API-07
  code: WEB-02
- title: 'WEB-03: Verificare e completare test setup'
  body: '### Contesto

    Il file setupTests.ts esiste ma potrebbe essere incompleto. Test frontend potrebbero
    non avere matcher Jest-DOM configurati.


    ### DoD

    - [ ] setupTests.ts contiene import di @testing-library/jest-dom.

    - [ ] Test esistenti in src/__tests__/home.test.tsx passano.

    - [ ] Matcher Jest-DOM funzionanti.

    - [ ] Script test e test:watch configurati.

    '
  labels:
  - area:web
  - type:test
  - priority:P2
  priority: P2
  impact: Medium
  estimate: S
  code: WEB-03
- title: 'WEB-04: Gestione dataset con upload verso API'
  body: '### Contesto

    Gli operatori devono caricare dataset e seguirne lo stato. Serve una UI per upload,
    lista e progress.


    ### DoD

    - [ ] Pagina /datasets con tabella e stati.

    - [ ] Form/modal per creare dataset e ottenere URL presignato.

    - [ ] Barra di avanzamento per upload (S3 multipart) e update via API.

    - [ ] Test end-to-end (Playwright) che copre upload fittizio.


    ### Dipendenze

    - [API-05] Dataset ingestion e storage su MinIO

    '
  labels:
  - area:web
  - type:feat
  - priority:P2
  priority: P2
  impact: High
  estimate: L
  depends_on:
  - API-05
  code: WEB-04
- title: 'WEB-05: Wizard Content Plan e approvazione'
  body: '### Contesto

    Il team marketing necessita di un flusso guidato per generare e approvare piani
    editoriali con anteprima dei post.


    ### DoD

    - [ ] Wizard multi-step (persona, tema, parametri prompt) che chiama /content-plans.

    - [ ] Preview dei post generati con possibilità di rigenerare.

    - [ ] Stato "Approved"/"Rejected" sincronizzato con l''API.

    - [ ] Test componenti principali e snapshot prompt.


    ### Dipendenze

    - [API-04] Endpoint Content Plan con integrazione OpenRouter

    '
  labels:
  - area:web
  - type:feat
  - priority:P2
  priority: P2
  impact: High
  estimate: L
  depends_on:
  - API-04
  code: WEB-05
- title: 'WEB-06: Shell applicativa e design system shadcn/ui'
  body: '### Contesto

    L''app web non utilizza ancora shadcn/ui né ha una navigazione consistente. Serve
    impostare layout, sidebar, theming e componentistica condivisa.


    ### DoD

    - [ ] Configurato shadcn/ui con palette brand e dark mode.

    - [ ] Layout principale con sidebar, header e breadcrumb.

    - [ ] Componenti base (Button, Card, Badge) centralizzati.

    - [ ] Documentazione sull''uso dei componenti custom.

    '
  labels:
  - area:web
  - type:feat
  - priority:P3
  priority: P3
  impact: Medium
  estimate: M
  code: WEB-06
- title: 'SDK-01: Estendere client con job, dataset e content plan'
  body: '### Contesto

    Il client SDK espone solo pochi metodi e presume endpoint non implementati. Serve
    allinearlo alle nuove route e gestire errori/coercizione tipi.


    ### DoD

    - [ ] Metodi listJobs, updateJob, listDatasets, createDataset, getContentPlan.

    - [ ] Gestione errori HTTP con traduzione in eccezioni typed.

    - [ ] Test unitari con msw o fetch mock.

    - [ ] Pubblicazione interna (pnpm build) per consumo web/worker.


    ### Dipendenze

    - [API-03] Esporre CRUD dei job e integrazione con BullMQ

    - [API-05] Dataset ingestion e storage su MinIO

    - [API-04] Endpoint Content Plan con integrazione OpenRouter

    '
  labels:
  - area:sdk
  - type:feat
  - priority:P2
  priority: P2
  impact: Medium
  estimate: M
  depends_on:
  - API-03
  - API-05
  - API-04
  code: SDK-01
- title: 'SDK-02: Hooks React con TanStack Query'
  body: "### Contesto\nIl frontend usa TanStack Query ma manca un set di hook typed\
    \ che incapsulano il client. Servono per riuso e cache coerente.\n\n### DoD\n\
    - [ ] Implementati hook (useJobs, useJob, useCreateJob, useDatasets, ...).\n-\
    \ [ ] Provider che espone InfluencerAIClient e configura il baseUrl.\n- [ ] Test\
    \ dei hook con React Testing Library + msw.\n- [ ] Documentazione veloce in README\
    \ web su come usarli.\n\n### Dipendenze\n- [SDK-01] Estendere client con job,\
    \ dataset e content plan\n"
  labels:
  - area:sdk
  - type:feat
  - priority:P2
  priority: P2
  impact: Medium
  estimate: M
  depends_on:
  - SDK-01
  code: SDK-02
- title: 'PKG-01: Aggiungere test per packages condivisi'
  body: '### Contesto

    I packages condivisi (core-schemas, sdk, prompts) non hanno test. Zod schemas
    e API utility non validati.


    ### DoD

    - [ ] Vitest configurato per core-schemas, sdk, prompts.

    - [ ] Test validazione per tutti gli Zod schemas principali.

    - [ ] Test client SDK e prompt templates.

    - [ ] `pnpm test` in root esegue test di tutti i packages.

    '
  labels:
  - area:packages
  - type:test
  - priority:P3
  priority: P3
  impact: Medium
  estimate: M
  code: PKG-01
- title: 'N8N-01: Versionare workflow end-to-end'
  body: "### Contesto\nLa cartella apps/n8n contiene solo un .gitkeep. Servono i\
    \ workflow base descritti nella README per orchestrare plan, training e autopost.\n\
    \n### DoD\n- [ ] Esportati i workflow principali (plan-generate, content-run,\
    \ publish).\n- [ ] Documentate le variabili richieste e credenziali da configurare.\n\
    - [ ] Script per import automazione (n8n import:workflow).\n- [ ] Verifica manuale\
    \ di un run in locale con API stub.\n\n### Dipendenze\n- [INFRA-03] Configurare\
    \ n8n workflows\n"
  labels:
  - area:n8n
  - type:feat
  - priority:P2
  priority: P2
  impact: High
  estimate: M
  depends_on:
  - INFRA-03
  code: N8N-01
- title: 'DEV-01: Documentare procedura setup completa'
  body: '### Contesto

    Manca guida step-by-step per setup ambiente sviluppo, specialmente per Windows.
    Script PowerShell esistono ma non documentati.


    ### DoD

    - [x] `docs/SETUP.md` creato con guida completa (prerequisiti, clone, Docker, DB, .env).

    - [x] `docs/TESTING.md` con istruzioni per eseguire test.

    - [x] Script PowerShell documentati in `scripts/README.md`.

    - [x] Sezione troubleshooting con problemi comuni.


    ### Dipendenze

    - [INFRA-01] Inizializzare database con Prisma migrations

    - [INFRA-02] Configurare MinIO bucket e credenziali

    - [INFRA-03] Configurare n8n workflows

    '
  labels:
  - area:docs
  - type:chore
  - priority:P2
  priority: P2
  impact: High
  estimate: M
  depends_on:
  - INFRA-01
  - INFRA-02
  - INFRA-03
  code: DEV-01
