name: GitFlow — One‑Click from Issue

on:
  workflow_dispatch:
    inputs:
      app:
        description: Which app env
        required: true
        type: choice
        options: [app-foo, app-bar]
      issue_number:
        description: Issue number to automate
        required: true
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  gate:
    runs-on: ubuntu-latest
    outputs:
      run: ${{ steps.gate.outputs.run }}
      app: ${{ steps.gate.outputs.app }}
      issue: ${{ steps.gate.outputs.issue }}
    steps:
      - id: gate
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            body=$(jq -r '.comment.body' < "$GITHUB_EVENT_PATH")
            if [[ "$body" =~ ^/gitflow[[:space:]]+run ]]; then
              echo "run=true" >> $GITHUB_OUTPUT
              echo "app=app-foo" >> $GITHUB_OUTPUT
              echo "issue=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            else
              echo "run=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "run=true" >> $GITHUB_OUTPUT
            echo "app=${{ inputs.app }}" >> $GITHUB_OUTPUT
            echo "issue=${{ inputs.issue_number }}" >> $GITHUB_OUTPUT
          fi

  automate:
    needs: gate
    if: needs.gate.outputs.run == 'true'
    runs-on: ubuntu-latest
    environment: ${{ needs.gate.outputs.app }}
    env:
      ISSUE_NUMBER: ${{ needs.gate.outputs.issue }}
      DEFAULT_REVIEWER: ${{ secrets.DEFAULT_REVIEWER }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - uses: cli/cli@v2

      - name: Derive metadata from Issue
        id: meta
        run: |
          title=$(gh issue view $ISSUE_NUMBER --json title -q .title)
          slug=$(echo "$title" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g; s/^-+|-+$//g')
          scope=$(echo "$title" | awk '{print $1}' | tr '[:upper:]' '[:lower:]')
          echo "branch=feat/${ISSUE_NUMBER}-${slug}" >> $GITHUB_OUTPUT

      - name: Create/Update feature branch
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          if git ls-remote --heads origin ${{ steps.meta.outputs.branch }} | grep -q .; then
            git checkout ${{ steps.meta.outputs.branch }}
            git merge --no-edit origin/develop || true
          else
            git checkout -b ${{ steps.meta.outputs.branch }}
            git push -u origin ${{ steps.meta.outputs.branch }}
          fi

      - name: Open or update Draft PR to develop
        id: pr
        run: |
          number=$(gh pr list --head ${{ steps.meta.outputs.branch }} --base develop --json number -q '.[0].number')
          if [[ -z "$number" || "$number" == "null" ]]; then
            number=$(gh pr create               --base develop               --head ${{ steps.meta.outputs.branch }}               --title "${{ steps.meta.outputs.branch }} (#${ISSUE_NUMBER})"               --body "Draft PR for issue #${ISSUE_NUMBER}. Auto‑generated by GitFlow One‑Click.

## Checklist DoD
- [ ] Lint/format ok
- [ ] Test locali passano
- [ ] E2E/UX aggiornati (se serve)
- [ ] Docs/Changelog aggiornati
- [ ] Migrazioni verificate
- [ ] Conferma manuale maintainer (manual)"               --draft)
          fi
          echo "pr=$number" >> $GITHUB_OUTPUT

      - name: Apply PR labels from branch
        env: { GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} }
        run: |
          b="${{ steps.meta.outputs.branch }}"
          pr="${{ steps.pr.outputs.pr }}"
          case "$b" in
            feat/*) t="type: feature" ; rel="release: minor" ;;
            fix/*|hotfix/*) t="type: fix" ; rel="release: patch" ;;
            chore/*) t="type: chore" ; rel="release: patch" ;;
            *) t="needs-triage" ; rel="" ;;
          esac
          slug="${b#*/}"; slug="${slug#*-}"; area=""; first="${slug%%-*}"
          case "$first" in api|ui|db|infra|e2e|security|deps) area="area: $first";; esac
          lbls=("$t" "status: needs-review")
          [ -n "$rel" ] && lbls+=("$rel")
          [ -n "$area" ] && lbls+=("$area")
          gh pr edit "$pr" --add-label "$(IFS=,; echo "${lbls[*]}")"

      - name: Request review & enable automerge
        run: |
          if [[ -n "$DEFAULT_REVIEWER" ]]; then
            gh pr ready ${{ steps.pr.outputs.pr }} || true
            gh pr request-review ${{ steps.pr.outputs.pr }} --reviewer "$DEFAULT_REVIEWER" || true
          fi
          gh pr merge ${{ steps.pr.outputs.pr }} --auto --squash || true
