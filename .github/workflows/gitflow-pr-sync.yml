name: GitFlow — PR DoD Sync on CI Success

on:
  workflow_run:
    workflows: ["CI", "Build & Test", "E2E"]
    types: [completed]
  workflow_dispatch:
    inputs:
      app:
        description: Which app env
        required: true
        type: choice
        options: [app-foo, app-bar]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  sync:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.app || 'app-foo' }}
    steps:
      - uses: cli/cli@v2

      - name: Derive PR from head branch
        id: pr
        env: { GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} }
        run: |
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            head_branch=$(jq -r '.workflow_run.head_branch' < "$GITHUB_EVENT_PATH")
          else
            # manual: tenta di trovare l'ultima PR aperta (fallback)
            head_branch=$(gh pr list --state open --json headRefName -q '.[0].headRefName')
          fi
          pr=$(gh pr list --state open --head "$head_branch" --json number,baseRefName --jq '.[0].number')
          if [ -z "$pr" ]; then
            echo "Nessuna PR trovata"; exit 0
          fi
          echo "pr=$pr" >> $GITHUB_OUTPUT

      - name: Load PR & Issue bodies
        if: steps.pr.outputs.pr
        id: bodies
        env: { GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} }
        run: |
          pr=${{ steps.pr.outputs.pr }}
          gh pr view $pr --json body -q .body > pr.md
          issue=$(gh pr view $pr --json body,title --jq '[.title,.body] | join("\n")' | grep -oE '#[0-9]+' | head -n1 | tr -d '#')
          if [ -n "$issue" ]; then
            gh issue view $issue --json body -q .body > issue.md || echo "" > issue.md
          else
            echo "" > issue.md
          fi
          echo "issue=$issue" >> $GITHUB_OUTPUT

      - name: Tick auto DoD in PR
        if: steps.pr.outputs.pr
        run: |
          for item in             'Lint/format ok'             'Test locali passano'             'E2E/UX aggiornati (se serve)'             'Docs/Changelog aggiornati'             'Migrazioni verificate'; do
            sed -i "s/- \[ \] $item/- [x] $item/g" pr.md || true
          done
          gh pr edit ${{ steps.pr.outputs.pr }} --body-file pr.md

      - name: Mirror DoD to Issue
        if: steps.bodies.outputs.issue
        env: { GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} }
        run: |
          for item in             'Lint/format ok'             'Test locali passano'             'E2E/UX aggiornati (se serve)'             'Docs/Changelog aggiornati'             'Migrazioni verificate'; do
            sed -i "s/- \[ \] $item/- [x] $item/g" issue.md || true
          done
          gh issue edit ${{ steps.bodies.outputs.issue }} --body-file issue.md

      - name: Convert Draft → Ready if only manual remains
        if: steps.pr.outputs.pr
        env: { GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} }
        run: |
          remain_auto=$(grep -E '^- \[ \] (Lint/format ok|Test locali passano|E2E/UX aggiornati \(se serve\)|Docs/Changelog aggiornati|Migrazioni verificate)$' -c pr.md || true)
          if [ "$remain_auto" -eq 0 ]; then
            gh pr ready ${{ steps.pr.outputs.pr }} || true
            gh pr merge ${{ steps.pr.outputs.pr }} --auto --squash || true
            gh pr comment ${{ steps.pr.outputs.pr }} --body "DoD auto ✔ — PR convertita a Ready"
          fi
