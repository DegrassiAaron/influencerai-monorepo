name: CI

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - 'infra/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - 'infra/**'
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: read

jobs:
  prepare:
    name: Prepare diff context
    runs-on: ubuntu-latest
    outputs:
      base_sha: ${{ steps.detect.outputs.base_sha }}
      head_sha: ${{ steps.detect.outputs.head_sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect base/head commits
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
          elif [[ -n "${{ github.event.before }}" ]]; then
            BASE_SHA="${{ github.event.before }}"
          else
            BASE_SHA="$(git rev-parse HEAD^ || git rev-parse HEAD)"
          fi

          HEAD_SHA="$(git rev-parse HEAD)"

          echo "base_sha=${BASE_SHA}" >> "$GITHUB_OUTPUT"
          echo "head_sha=${HEAD_SHA}" >> "$GITHUB_OUTPUT"

  lint:
    name: Lint (changed scope)
    needs: prepare
    runs-on: ubuntu-latest
    env:
      CI: 'true'
      CI_BASE_SHA: ${{ needs.prepare.outputs.base_sha }}
      CI_HEAD_SHA: ${{ needs.prepare.outputs.head_sha }}
      TURBO_CACHE_DIR: .turbo/lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: ./.github/actions/setup-pnpm
        with:
          version: '10.17.1'

      - name: Resolve pnpm store directory
        id: pnpm-store
        run: echo "path=$(pnpm store path --silent)" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache workspace node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.pnpm
            apps/*/node_modules/.pnpm
            packages/*/node_modules/.pnpm
          key: ${{ runner.os }}-workspace-modules-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-workspace-modules-

      - name: Install dependencies
        run: pnpm -w install --frozen-lockfile

      - name: Verify dependencies installed
        shell: bash
        run: |
          set -euo pipefail
          echo "Verifying critical package node_modules..."

          # Check that packages have node_modules (at least .pnpm virtual store)
          for pkg_dir in apps/* packages/*; do
            if [ -f "$pkg_dir/package.json" ]; then
              pkg_name=$(basename "$pkg_dir")
              if [ ! -d "$pkg_dir/node_modules" ]; then
                echo "ERROR: $pkg_dir/node_modules not found after pnpm install"
                exit 1
              fi
            fi
          done

          echo "✓ All workspace packages have node_modules"

      - name: Prepare turbo cache
        run: mkdir -p "${TURBO_CACHE_DIR}"

      - name: Cache turbo (lint)
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turbo-lint-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-lint-

      - name: Run lint (changed packages)
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${CI_BASE_SHA}" ]]; then
            FILTER="...[${CI_BASE_SHA}]"
          else
            FILTER="..."
          fi
          echo "Executing turbo filter: ${FILTER}"
          pnpm turbo run lint --filter="${FILTER}"

  unit-tests:
    name: Unit tests (changed scope)
    needs: prepare
    runs-on: ubuntu-latest
    env:
      CI: 'true'
      CI_BASE_SHA: ${{ needs.prepare.outputs.base_sha }}
      CI_HEAD_SHA: ${{ needs.prepare.outputs.head_sha }}
      TURBO_CACHE_DIR: .turbo/unit
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: ./.github/actions/setup-pnpm
        with:
          version: '10.17.1'

      - name: Resolve pnpm store directory
        id: pnpm-store
        run: echo "path=$(pnpm store path --silent)" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache workspace node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.pnpm
            apps/*/node_modules/.pnpm
            packages/*/node_modules/.pnpm
          key: ${{ runner.os }}-workspace-modules-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-workspace-modules-

      - name: Install dependencies
        run: pnpm -w install --frozen-lockfile

      - name: Verify dependencies installed
        shell: bash
        run: |
          set -euo pipefail
          echo "Verifying critical package node_modules..."

          # Check that packages have node_modules (at least .pnpm virtual store)
          for pkg_dir in apps/* packages/*; do
            if [ -f "$pkg_dir/package.json" ]; then
              pkg_name=$(basename "$pkg_dir")
              if [ ! -d "$pkg_dir/node_modules" ]; then
                echo "ERROR: $pkg_dir/node_modules not found after pnpm install"
                exit 1
              fi
            fi
          done

          echo "✓ All workspace packages have node_modules"

      - name: Prepare turbo cache
        run: mkdir -p "${TURBO_CACHE_DIR}"

      - name: Cache turbo (unit)
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turbo-unit-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-unit-

      - name: Run unit tests (changed packages)
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${CI_BASE_SHA}" ]]; then
            FILTER="...[${CI_BASE_SHA}]"
          else
            FILTER="..."
          fi
          echo "Executing turbo filter: ${FILTER}"
          pnpm turbo run test:unit --filter="${FILTER}"

  integration-tests:
    name: API integration tests
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard_index: [1, 2]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: influencerai
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 10
    env:
      CI: 'true'
      CI_BASE_SHA: ${{ needs.prepare.outputs.base_sha }}
      CI_HEAD_SHA: ${{ needs.prepare.outputs.head_sha }}
      JEST_FORCE_ALL: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      JEST_SHARD_INDEX: ${{ matrix.shard_index }}
      JEST_TOTAL_SHARDS: 2
      DATABASE_URL_TEST: postgresql://postgres:postgres@127.0.0.1:5432/influencerai
      DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/influencerai
      REDIS_URL: redis://127.0.0.1:6379
      S3_ENDPOINT: http://127.0.0.1:9000
      S3_KEY: minio
      S3_SECRET: minio12345
      S3_BUCKET: assets
      TURBO_CACHE_DIR: .turbo/integration
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: ./.github/actions/setup-pnpm
        with:
          version: '10.17.1'

      - name: Resolve pnpm store directory
        id: pnpm-store
        run: echo "path=$(pnpm store path --silent)" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache workspace node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.pnpm
            apps/*/node_modules/.pnpm
            packages/*/node_modules/.pnpm
          key: ${{ runner.os }}-workspace-modules-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-workspace-modules-

      - name: Install dependencies
        run: pnpm -w install --frozen-lockfile

      - name: Verify dependencies installed
        shell: bash
        run: |
          set -euo pipefail
          echo "Verifying critical package node_modules..."

          # Check that packages have node_modules (at least .pnpm virtual store)
          for pkg_dir in apps/* packages/*; do
            if [ -f "$pkg_dir/package.json" ]; then
              pkg_name=$(basename "$pkg_dir")
              if [ ! -d "$pkg_dir/node_modules" ]; then
                echo "ERROR: $pkg_dir/node_modules not found after pnpm install"
                exit 1
              fi
            fi
          done

          echo "✓ All workspace packages have node_modules"

      - name: Prepare turbo cache
        run: mkdir -p "${TURBO_CACHE_DIR}"

      - name: Cache turbo (integration)
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turbo-integration-${{ github.sha }}-${{ matrix.shard_index }}
          restore-keys: |
            ${{ runner.os }}-turbo-integration-

      - name: Start MinIO
        run: |
          docker run -d \
            --name minio \
            -p 9000:9000 \
            -p 9001:9001 \
            -e "MINIO_ROOT_USER=minio" \
            -e "MINIO_ROOT_PASSWORD=minio12345" \
            --health-cmd "curl -f http://localhost:9000/minio/health/live" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=10 \
            minio/minio:latest \
            server /data --console-address ":9001"

      - name: Wait for dependent services
        run: |
          echo "Waiting for PostgreSQL..."
          pnpm exec wait-on --timeout 60000 --interval 1000 tcp:127.0.0.1:5432

          echo "Waiting for Redis..."
          pnpm exec wait-on --timeout 60000 --interval 1000 tcp:127.0.0.1:6379

          echo "Waiting for MinIO..."
          for i in {1..30}; do
            if curl -sf http://127.0.0.1:9000/minio/health/live > /dev/null; then
              echo "MinIO is ready"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "MinIO failed to start within 60 seconds"
              docker logs minio
              exit 1
            fi
            echo "Waiting for MinIO... ($i/30)"
            sleep 2
          done

          echo "All services are ready"

      - name: Setup MinIO bucket
        run: |
          wget -q https://dl.min.io/client/mc/release/linux-amd64/mc -O /tmp/mc
          chmod +x /tmp/mc
          /tmp/mc alias set local http://127.0.0.1:9000 minio minio12345
          /tmp/mc mb --ignore-existing local/assets
          /tmp/mc ls local

      - name: Reset integration database
        run: pnpm --filter @influencerai/api run test:e2e:db:reset

      - name: Seed integration fixtures
        run: pnpm --filter @influencerai/api exec prisma db seed

      - name: Run API integration shard
        env:
          SKIP_DB_RESET: '1'
        run: |
          echo "Executing shard ${{ matrix.shard_index }} of 2"
          pnpm turbo run test:integration --filter='@influencerai/api'

  docker-build:
    name: Build Docker images
    needs:
      - lint
      - unit-tests
      - integration-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/api/Dockerfile
          push: false
          load: false
          tags: local/api:ci
          cache-from: type=gha,scope=api
          cache-to: type=gha,mode=max,scope=api

      - name: Build Web image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/web/Dockerfile
          push: false
          load: false
          tags: local/web:ci
          cache-from: type=gha,scope=web
          cache-to: type=gha,mode=max,scope=web

      - name: Build Worker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/worker/Dockerfile
          push: false
          load: false
          tags: local/worker:ci
          cache-from: type=gha,scope=worker
          cache-to: type=gha,mode=max,scope=worker
