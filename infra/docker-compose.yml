services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: influencerai
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio12345
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  n8n:
    image: n8nio/n8n:latest
    environment:
      - N8N_HOST=localhost
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - N8N_SECURE_COOKIE=false
    ports:
      - "5678:5678"
    volumes:
      - ../apps/n8n:/home/node/.n8n
    depends_on:
      - postgres
      - redis

  api:
    build:
      context: ..
      dockerfile: apps/api/Dockerfile
    env_file:
      - ../.env
    environment:
      # Ensure Nest binds to all interfaces inside the container
      - PORT=3001
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/influencerai}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - S3_ENDPOINT=${S3_ENDPOINT:-http://minio:9000}
      - S3_KEY=${S3_KEY:-minio}
      - S3_SECRET=${S3_SECRET:-minio12345}
      - S3_BUCKET=${S3_BUCKET:-assets}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      api-migrate:
        condition: service_completed_successfully

  api-migrate:
    build:
      context: ..
      dockerfile: apps/api/Dockerfile
    env_file:
      - ../.env
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/influencerai}
    depends_on:
      postgres:
        condition: service_healthy
    # Run migrations once, then exit successfully
    command: ["sh", "-lc", "npx prisma migrate deploy"]

  worker:
    build:
      context: ..
      dockerfile: apps/worker/Dockerfile
    env_file:
      - ../.env
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - API_BASE_URL=${API_BASE_URL:-http://api:3001}
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_started

  web:
    build:
      context: ..
      dockerfile: apps/web/Dockerfile
    env_file:
      - ../.env
    environment:
      # Next.js server listens on 3000 in the Dockerfile
      - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL:-http://localhost:3001}
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_started

volumes:
  pg_data:
  minio_data:
